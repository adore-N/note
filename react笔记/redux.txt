redux:
	组件的状态需要共享是,就需要把这个状态抽离出来,放到redux里面去,在任何地方都可以拿到这里状态,也不论他的层级,
	以及他是否是一个组件,在任何一个模块里面,我们都希望拿到这个所谓的redux里面的所存的数据,在组件里面,
	我们可以通过实例属性来访问他,在任何一个普通的模块,我们可以直接引入这个redux这个模块来访问到他,
	然后我们可以改变全局的redux的一个状态,然后一个组件可以改变另一个组件的共享状态,这时候就可以考虑到redux,
	首先组件内部的私有数据不需要使用redux,redux是一个插件,我们需要实例化,然后把它绑到顶层组件身上去,
	然后传给所有下层的组件,这样每个组件可以通过props来访问到传递过来store状态
	组件通过发送action,交给reducre,reducer通过突变state里面的内容,突变的方式拷贝,更新,并返回,
	reducre不仅承担了同步的业务,还负责获取state里面的内容
	组件拿到公共仓库里面的数据,做一个代码的展示
	action: 异步业务 
	state:一个单例对象
	组件如何和reducer通讯,通过store实例身上的dispatch方法,发出去的东西叫做action,交给reducer做一些同步的业务处理
	并更新,返回修改state,
	组件内部可以通过getState()API来抓取staet状态,但是只能抓取一次,如果希望每次state被reducer更新之后都能动态的
	抓取到的话,需要手工的使用redux的store身上的subscribe()订阅,在订阅里面可以抓取他的内容,抓完之后还必要把数据放到
	react组件里面组响应式渲染,而react组件里面能响应式渲染的属性props,state,context,所以要想办法把getState()API
	拿到的状态放到react的响应式组件内部,让组件内部可以响应式起来

	打造store实例: store.js  -> store挂到顶层组件   -> 手工传递props 里面store ->
	 组件内部通过this.props.store拿到状态 -> 订阅 动态响应


react-redux:

	简化的是什么东西,简化的东西也就说在组件内部不需要再打造一个构造器去订阅,用getState拿数据,
	mapState()帮助返回回来了

	没有影响redux的自身,redux,的reducer,state该怎么写还怎么写 ,只不过到了最外面的redux暴露出来的store
	没有必要再转给顶层组件了,就是既是传给了顶层组件,只有顶层组件可以用,下层组件依然不能用(需要传递)
	由react-redux提供的provider接管了store,组件里面不要导出目标组件,而是导出一个容器组件,外面实际连接的是一个容器组件,而容器组件通过connect函数来打造,连接了外面,接收外面的state,而且把里面的dispatch往外面发,
	连接里面的组件,把容器组件对外导出去



来自....
来到贵公司.....职位
..有几年....,之前在....工作
期间,