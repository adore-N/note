
------------------------------------------------------------

模板表达式:

	{{数据本身|data的属性|实例属性|变量|表达式}}
	v-指令名="数据|data的属性|变量|表达式|语句"
	
------------------------------------------------------------
计算属性:  是一个函数,所依赖的元数据变化时，会再次执行，平时会缓存，是响应式的，需要在模板中渲染才可调用
	computed:{
		计算属性: function(){return 返回值}		使用:	{{计算属性}}
	}
	

	与methods的区别:	方法会每次调用，计算属性不会
		计算属性的性能高: 适合做筛选，基于它们的响应式依赖进行缓存的
		方法：适合在列表渲染使用，强制渲染执行

------------------------------------------------------------

属性检测|数据观测： 需要在数据变化时执行异步或开销较大的操作时

	watch:{
		数据名:'methods函数名'    数据名==data的数据
		数据名:函数体(new,old)
		数据名:{
			handler:fn(new,old),
			deep: true 深度检测  默认 false
			immediate: true 首次运行  默认false
		}
	}

计算属性 vs 属性检测

	计算属性computed: 	首次运行   		调用时需要在模板中渲染，修改计算所依赖元数据		默认深度依赖		适合做筛选，不可异步
	属性检测watch: 		首次不运行		调用时只需修改元数据								默认浅度观测		适合做执行异步或开销较大的操作


------------------------------------------------------------

样式操作|属性绑定
	v-bind:class="数据|属性|变量|表达式"
		  :class/style = " 数据 "		数据类型：字符/对象 / 数组
		  :class="{类名:true,类名2:false}"  布尔值决定样式是否使用
		  :style="[{css属性名:值},{css属性名小驼峰：值}]"

------------------------------------------------------------
指令:  扩展了html语法功能,区别了普通的html属性
	vue自带的指令:	v-text/v-html/v-bind/v-for/v-model/v-on

			v-show="布尔" 			v-if="布尔"
	区别:	操作css					操作dom
	场景:	适合频繁切换		    适合不频繁切换
	性能:	初始渲染消耗			频繁切换回有消耗

	其他指令: https://cn.vuejs.org/v2/api/#指令

	指令(directive):
		v-once 渲染一次
		v-pre  原样输出，不编译
		v-cloak 防闪烁
		v-

	自定义指令: 指令是个函数|对象,用来操作dom的, 里面的this 返回window

		a)全局:	Vue.directive('指令名不带v-',函数(el,binding))
			el == 使用指令的DOM元素
			binding 是个对象 含有传入的 参数(binding.value)
		b)局部:  定义在选项里面
			directives:{
				指令名不带v-	: 函数(el,binding){}
			}

		指令是个函数(简写)，可以是个对象

		{
			钩子函数
			inserted:fn(el,binding)		绑定指令的元素插入到父节点时调用
			bind:fn	指令第一次绑定到元素时调用
			update:fn	指令所在的元素的model层的数据，view有更新请求时
			componentUpdated:fn	更新完成时
		}

		简写方式: bind + update