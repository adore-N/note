继承的本质是原型链

call、apply的共同点与区别?
1、改变了函数运行上下文
2、call()和apply()主要是能扩充函数赖以运行作用域。两者的作用方式相同，它们的区别在于接收参数的方式不同，
对于call()而言，第一个参数this与apply()相同，其他的参数必须直接传给函数，要一个一个的列出来，
而对于apply()来说，apply()可以接收一个数组或arguments对象。所以如何选择二者，在于哪种给函数传参数的方式最简单。

二、优缺点：
原型链继承的缺点
1、字面量重写原型
一是字面量重写原型会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数。
2、借用构造函数（类式继承）
借用构造函数虽然解决了刚才两种问题，但没有原型，则复用无从谈起。所以我们需要原型链+借用构造函数的模式，这种模式称为组合继承
3、组合式继承
组合式继承是比较常用的一种继承方法，其背后的思路是 使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。
这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。

说说你对作用域链的理解？
作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，
作用域链向下访问变量是不被允许的。

javaScripti闭包
1、闭包是函数和声明该函数的词法环境的组合。
2、使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，
使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念

闭包的特征？
1、函数嵌套函数
2.、函数内部可以引用外部的参数和变量
3、参数和变量不会被垃圾回收机制回收

闭包应用场景？
1、作为返回值
    function fn() {
        var max = 10;
        return function bar(x) {
            if (x > max) {
                console.log(x);
            }
        }
    }
    var f1 = fn();
    f1(15);
2、作为参数传递
    var max = 10;
    function fn(x) {
        if (x > max) {
            console.log(x);
        }
    }
    (function(f) {
        var max = 100;
        f(15);
    })(fn);

实际开发中闭包的应用？
    闭包实际应用中主要用于封装变量，收敛权限
    function isFirstLoad() {
        var _list = []; // 有_的变量说明是私有变量，函数内部使用的
        return function(id) {
            if (_list.indexOf(id) >=0) { // 也可用includes
                return false;
            } else {
                 _list.push(id);
                 return true;
            }
        }
    }
    // 使用
    var firstLoad = isFirstLoad();
    console.log(firstLoad(10)); // true
    console.log(firstLoad(10)); // false
    console.log(firstLoad(20)); // true
    // 你在isFirstLoad函数外面，根本不可能修改掉_list的值

js为什么是单线程的？
避免dom渲染的冲突
1、浏览器需要渲染dom
2、js可以修改dom结构
3、js执行的时候，浏览器dom渲染会暂停
4、两段js也不能同时执行（都修改dom就冲突了）
5、webworder支持多线程，但是不能访问dom

js运行机制/ 单线程/ 异步
（1）javascript是单线程的，主线程拥有一个执行栈以及一个任务队列，主线程会依次执行代码，当遇到异步函数时候，会先将该函数入栈，
所有主线程函数运行完毕后再将异步函数出栈，直到所有的异步函数执行完毕即可。
（2）Macrotask（宏任务）和Microtask（微任务）
都属于上述的异步任务中的一种，他们分别有如下API：
macrotask: setTimeout, setInterval, setImmediate, I/O, UI rendering
microtasks: process.nextTick, Promise, MutationObserver
（3）promise中的then方法的函数会被推入到microtasks队列中，而setTimeout函数会被推入到macrotasks
任务队列中，在每一次事件循环中，macrotask只会提取一个执行，而microtask会一直提取，直到microsoft队列为空为止。

同步和异步的区别是什么？分别举一个同步和异步的例子？
1、同步会阻塞代码执行，而异步不会。
2、alert是同步，setTimeout是异步。
同步：指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；
异步：指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。

何时需要异步？
1、在可能发生等待的情况，等待也是占线程的一种
2、等待过程中不能像alert一样阻塞程序进行
3、因此，“等待的情况”都需要异步

什么是任务队列？
任务队列（task queue）主要分两种：
1、宏任务（macrotask）：在新标准中叫task
（1)主要包括：script(整体代码)，setTimeout，setInterval，setImmediate，I/O，ui rendering
2、微任务（microtask）：在新标准中叫jobs
（1）主要包括：process.nextTick， Promise，MutationObserver（html5新特性）

扩展：
1、同步任务：在主线程上，排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务;
2、异步任务：不进入主线程，而进入“任务队列”（task queue）的任务，只有“任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。

null和undefined的区别？
1、null是一个表示”无”的对象，是只有一个值的特殊类型，转为数值时为0； undefined是一个表示”无”的原始值，表示一个空对象引用，转为数值时为NaN。
2、当声明的变量还未被初始化时，变量的默认值为undefined。
3、null用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。 undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。
4、null 和 undefined 的值相等，但类型不等

undefined的典型用法？
1、变量被声明了，但没有赋值时，就等于undefined。
2、调用函数时，应该提供的参数没有提供，该参数等于undefined。
3、对象没有赋值的属性，该属性的值为undefined。
4、函数没有返回值时，默认返回undefined。

数组API？
1、forEach 遍历所有元素
var arr = [1, 2, 3];
arr.forEach(function(item, index) {
	// 	遍历数组的所有元素
	console.log(index, item);
});
2、every 判断所有元素是否都符合条件
var arr = [1, 2, 3];
var arr1 = arr.every(function(item, index) {
	if (item < 4) {
		return true;
	}
})
console.log(arr1); // true
3、some 判断是否有至少一项元素符合条件
var arr = [1, 2, 3];
var result = arr.some(function(item, index) {
	if (item < 2) {
		return true;
	}
})
console.log(result); // true
4、sort 排序
var arr = [1, 5, 2, 7, 3, 4];
var arr2 = arr.sort(function(a, b) {
	// 从小到大
	return a-b;
	// 从大到小
	return b-a;
})
console.log(arr2); // 1,2,3,4,5,7
5、map 对元素重新组装，生成新数组
var arr = [1, 5, 2, 7, 3, 4];
var arr2 = arr.map(function(item, index) {
	return '<b>' + item + '</br>';
})
console.log(arr2);
6、filter 过滤符合条件的元素
var arr = [1, 2, 3, 4];
var arr2 = arr.filter(function(item, index) {
	if (item>2) {
		return true;
	}
})
console.log(arr2); // [3, 4]

哪些操作会造成内存泄漏？
1、垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），
    或对该对象的惟一引用是循环的，那么该对象的内存即可回收。
2、setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。
3、闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）

event对象的常见应用？
1、event.preventDefault(); // 阻止默认行为，阻止a链接默认的跳转行为
2、event.stopPropagation(); // 阻止冒泡
3、event.stopImmediatePropagation(); // 按钮绑定了2个响应函数，依次注册a,b两个事件，点击按钮，
    a事件中加event.stopImmediatePropagation()就能阻止b事件
4、event.currentTarget // 早期的ie不支持，当前绑定的事件

前端错误的分类/ 如何检测js错误/ 如何保证你的产品质量？
1、即时运行错误：代码错误
（1）try.catch
（2）window.onerror：只能捕获即时运行错误
2、资源加载错误，资源加载错误不会向上冒泡，不会冒泡到window
（1)object.onerror：图片有onerror事件，script标签也有onerror事件
（2）performance.getEntries：高级浏览器，可以间接拿到没有加载的资源错误。返回的是一个数组。
    performance.getEntries().forEach(item=> {console.log(item.name)}); // 打印出来的是已成功加载的资源
    document.getElementByTagName('img'); // 打印出来的是所有图片资源（包括已经成功加载和没有成功加载）
3、error事件捕获：资源加载错误不会冒泡，但是会发生捕获

1、延伸：
跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？
（1）在script标签增加crossorigin属性。
（2）设置js资源响应头Access-Control-Allow-Origin:*

上报错误的基本原理？
1、采用ajax通信的方式上报。
能做到，但是所有的错误监控都不是通过这种方式做的。
2、采用image对象上报。
所有的错误方式都是通过这种方式上报的。

模块化
1、amd
AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。
（1）require.js
    <script src="/require.min.js" data-main="./main.js"></script>
    <!--main.js是入口-->
（2）全局define函数
    define(['./a-util.js'], function(aUtil) {
        return {
            printDate: function(date) {
                console.log(aUtil.aGetFromatDate(date));
            }
        }
    })
（3）全局require函数
    // main.js
    require(['./a.js'], function(a) {
        var date = new Date();
        a.printDate(date);
    })
（4）依赖js会自动、异步加载

2、cmd
CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。

3、commonJS
    define(function(require, exports,module) {
          // 模块代码
    });
amd、cmd区别？

1、依赖
amd推崇依赖前置。amd在定义模块的时候要先声明其依赖的模块。
cmd推崇就近依赖。cmd只要依赖的模块在附近就行了。

amd、commonJs区别？
1、模块对象输出
amd推荐的风格通过返回一个对象做为模块对象
CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的。

XML和JSON的区别？
1、数据体积方面
JSON相对于XML来讲，数据的体积小，传递的速度更快些。
2、数据交互方面
JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。
3、数据描述方面
JSON对数据的描述性比XML较差。
4、传输速度方面
JSON的速度要远远快于XML。

Web Worker 和webSocket？
1、worker主线程:
（1）通过 worker = new Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。
（2）通过worker.postMessage( data) 方法来向worker发送数据。
（3）绑定worker.onmessage方法来接收worker发送过来的数据。
（4）可以使用 worker.terminate() 来终止一个worker的执行。
2、WebSocket
是Web应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个Html5协议，WebSocket的连接是持久的，
他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。

new操作符具体干了什么呢？
1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
2、属性和方法被加入到 this 引用的对象中。
3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。
    var obj  = {};
    obj.__proto__ = Base.prototype;
    Base.call(obj);


3.ajax的步骤；
q：(1) 创建XMLHttpRequest对象,也就是创建一个异步调用对象. 
??
      (2) 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息. 
??
      (3)设置响应HTTP请求状态变化的函数. 
??
      (4)发送HTTP请求. 
??
      (5)获取异步调用返回的数据. 
??
      (6)使用JavaScript和DOM实现局部刷新.

4.xml和json的区别；
q：json数据体积小，传递速度快，JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互，XML对数据描述性比较好；

8.常见的HTTP状态码；
q：2开头 （请求成功）、3开头 （请求被重定向）、4开头 （请求错误）、5开头（服务器错误）











