vue的生命周期
beforeCreate（创建前） 在数据观测和初始化事件还未开始

created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来

beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。
注意此时还没有挂载html到页面上。

mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。
完成模板中的html渲染到html页面中。此过程中进行ajax交互。

beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。

updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。
然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。

beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。

destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。

1、什么是vue生命周期？
Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。

简述每个周期具体适合哪些场景？
1、beforeCreate：可以在这加loading事件，在加载实例时触发。
2、created：初始化完成时的事件写在这里，如在这里结束loading，异步请求也适合在这里调用。
3、mounted：挂载元素，获取到dom节点。
4、updated：如果对数据统一处理，在这里写上相应的函数。
5、beforeDestroy：可以做一个确定停止事件的确认框。

1、Vue实现数据双向绑定的原理：Object.defineProperty（）
2、vue实现数据双向绑定主要步骤：
（1)需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter。
这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化。
（2)compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，
添加监听数据的订阅者，
一旦数据有变动，收到通知，更新视图。
（3)Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:
①在自身实例化时往属性订阅器(dep)里面添加自己
②自身必须有一个update()方法
③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。
（4)MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，
	通过Compile来解析编译模板指令，
最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。

vue如何实现双向绑定/ vue双向绑定的原理/ vue双向绑定机制/ vue data是怎么实现的?
采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter，
在数据变动时发布消息给订阅者，触发相应的监听回调。

1、Vue的路由实现：hash模式 和 history模式
hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；
特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无害，hash不会重新加载页面。
hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 http://www.xxx.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。
history模式：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，
以及popState事件的监听到状态变更。
history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 http://www.xxx.com/items/id。后端如果缺少对 /items/id 的路由处理，
将返回 404 错误。
Vue-Router 官网里如此描述：“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：
如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”

路由之间跳转方式？
1、直接修改地址栏中的路由地址。
2、声明式（标签跳转）：通过router-link实现跳转
<router-link to="/myRegister">注册</router-link>
3、编程式（js跳转）：通过js的编程方式
this.$router.push('/myLogin');

vue-router有哪几种导航钩子？它们有哪些参数？
3种。
1、全局导航钩子：
（1）前置守卫：跳转前进行拦截。
router.beforeEach(to, from, next)
（2）后置钩子
router.afterEach((to, from) => {})
2、组件内的钩子
beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave
3、单独路由独享组件。
beforeEnter: (to, from ,next)

7、父子组件、兄弟组件之间组件传值是怎么传的？
1、父组件与子组件传值 
父组件传给子组件：子组件通过props方法接受数据;
子组件传给父组件：$emit 方法传递参数
2、非父子组件间的数据传递，兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。$emit 传值，$on() 接收值。项目比较小时，用这个比较合适。
3、整个状态存储：vuex

vuex
1、vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。
通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。
2、应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。

mutation 和action的区别
改变状态的方式，同步逻辑封装在mutation中，异步逻辑封装在action中。

说出至少4中vue中的指令和用法？
1、v-show指令是通过修改元素的display的css属性让其显示或者隐藏。
2、v-if：判断是否隐藏。
3、v-for：数据循环。
4、v-bind:class，绑定一个属性。
5、v-model：实现双向绑定。

v-show和v-if指令的共同点和不同点？
1、v-show指令是通过修改元素的display的css属性让其显示或者隐藏。
2、v-if指令是直接销毁和重建dom达到让元素显示和隐藏的效果。

vue的整个实现流程？
1、第一步：解析模板到render函数
	template
2、第二步：响应式开始监听
object.defineProperty
data属性代理到vm上
3、第三步：首次渲染，显示页面，且绑定依赖
（1）为何要监听get,直接监听set不行吗？
①data中有很多属性，有些被用到，有些可能不被用到（data中没有人访问，就不会用get，如没有{{aaa}}指的就是aaa没有被访问）
②被用到的会走到get，不被用到的不会走到get
③未走到get中的属性，set的时候也无需关心
④避免不必要的重复渲染
4、第四步：data属性变化，触发render
defineProperty, get, set
（1）修改属性，被响应式的set监听到
（2）set中执行updateComponent
（3）updateComponent重新执行vm._render()
（4）生成的vnode和prevVnode,通过Patch进行对比
渲染到html

vue的优点是什么？
1、低耦合。视图（view）可以独立于model变化和修改，一个viewModel可以绑定到不同的”view“上，当view变化的时候，model可以不变，当model变化的时候view也可以不变。
2、可重用性。你可以把一些视图逻辑放在一个viewModel里面，让很多view重用这段视图逻辑。
3、独立开发。开发人员可以专注于业务逻辑和数据的开发，设计人员可以专注于页面设计。
4、可测试。界面素来是比较难测试的，而现在测试可以针对viewModel来写。

什么时候用到vue.nextTick()？
1、created()钩子函数中，进行dom操作，要放在vue.nextTick()回调函数中。
原因：created()钩子函数执行的时候,dom其实并未进行任何渲染。
2、mounted钩子函数中，在数据变化中要执行某个操作，而这个操作需要随数据改变而改变数据结构。
原因：设置数据改变，vm.someData = ‘new value’, dom并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时，才会进行必要的dom更新。此时如果想要根据更新的dom状态去做某些事情时，就会出现问题。
为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) ，这样回调函数在 DOM 更新完成后就会调用

自定义指令（v-check、v-focus)的方法有哪些？它有哪些钩子函数？它有哪些钩子函数参数？
1、定义指令的方法：
（1）全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。
（2）组件内定义指令：directives
2、钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）
3、钩子函数参数：el、binding
