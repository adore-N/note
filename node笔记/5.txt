路由(router):  告诉你去哪

	前端：导向 路由就告诉你应该去哪
	后端: 子服务	一个路由就是一个小的服务(server/app)

	1. 创建路由
		router = express.Router();  返回路由对象
	2. 导出路由
		module.exports = router;

	3. 服务安装路由
		app.use('地址',router); 主服务安装子服务
		router.use('地址'子router) 子服务安装孙服务   需要next 延续

	4. 路由处理响应：

		router.响应API(地址, 处理函数)

		router.get('/',fn)
		router.post('/1',fn)

		router.all('*',当前router路由下的验证工作) 需要next 延续

生成器：环境介绍


RESTful API

	在Restful之前的操作：

		增 POST /user/add POST 新增用户
		删 GET|POST /user/delete?name=xxx  删除用户信息
		改 POST /user/update?name=xxx POST 修改用户信息
		查 GET /user/find?name=xxx   根据用户id查询用户数据

	RESTful风格：

		增 POST /user  body中包含数据
		删 DELETE /user/1 | user?id=1 根据ID删除用户信息
		改 PUT|PATCH /user/1 body中包含数据 PUT覆盖修改 PATCH局部修改
		查 GET /user/1 | user?id=1 GET  根据用户id查询用户数据 没有id查询所有 /1 返对象 id=1 返回数组>对象
		
			分页	_page 第几页， _limit一页多少条
				GET /user?_page=7  不传递默认0条
				GET /user?_page=7&_limit=2 不传递默认10条
			排序 _sort设定排序的字段 _order设定排序的方式（默认升序）
				GET /user?_sort=views&_order=asc
				GET /user/1/comments?_sort=votes&_order=asc
				GET /user?_sort=title,views&_order=desc,asc 	多个字段排序
			任意切片数据 _start 开始不包含  _end 结束包含
				GET /users?_start=20&_end=30
				GET /user/1/comments?_start=20&_end=30
				GET /user/1/comments?_start=20&_limit=10
			全文检索	GET /user?q=九哥
			...........


项目：
	0. 需求确认........
	1. 定义数据字典(数据库设计) | api 请求方式
		banner：	[
					{ 
						"_id" : xx, 
						"title" : "1", 
						"sub_title" : "1", 
						"banner" : "xxxxxxxxxxxx", 
						"time":234234,
						"detail" : { 
							"auth" : "", 
							"content" : "<p>xxx<p>", 
							"icon" : "/upload/banner/9d4083b4f1d28a6c0fb4c463526790eb.jpg" 
							...
						}, 
					}
				]
		product: home/follow/column
			{ 
				"_id" : xx, 
				"title" : "1_", 
				"des" : "2", 
				"time":234234,
				"detail" : { 
					"auth" : "4", 
					"content" :"<p>3</p>", 
					"auth_icon" : "/upload/user/xxx.jpg" 
				} 
			}
		user:	
			{ 
				"_id" : xx, 
				"username" : "alex", 
				"password" : "*****", 
				"follow" : "100", 
				"fans" : "200", 
				"nikename" : "九叔_", 
				"icon" : "/upload/968a3b7218ee744931276a64c9b7ea01.png", 
				"time" : 1551620448550 
				...
			}
		super:
			{ 
				"_id" : xx, 
				"username" : "admin", 
				"password" : "admin123", 
				"icon" : "/img/avatar-5.jpg" 
			}
	2. 素材准备(静态页面模板用户端|管理端)
	3. 搭建服务器
	4. 处理 http请求，拿到数据，后端渲染页面，前端制作API
	5. 项目目录规划

		   bin  |-
		   		   www 启动文件
		   utils|- 全局公共
		   		|- douban|mgd|mysql
		   config 全局配置
		   		|- global (_page,_limit,q,upload...)
		   		|- server (local,http,https)
		   public 资源托管
		   		|-admin 管理端
		   		|-template 用户端
		   		|-upload
		   			|- banner|product|user
		   			|- product
		   				|- home|follow|column
		   routes 子服务，路由
		   		admin 管理端
		   			|- feedback
		   				|- success|error
		   			|- product
		   				|- add|del|check
		   			|- banner
		   				|- add|del|check
		   			|- user
		   				|- add|del|check
		   			|- home| product|banner|user
		   			|- islogin | login | reg | logout
		   		api 用户端
		   			|- product (home/follow/column) | banner | user | login | reg | logout
		   		proxy 代理
		   		...
		   views 管理端模板 
		   	 	|- feedback
		   				|- success|error|app_error
		   		|- ... 结构同 admin 管理端
		   	 	|- common
		   	 		|- header|footer|slider|crumb|toolbar|paging

	7. 客户端 api 生成，api文档

		https://www.easyapi.com 在线

			http://www.easyapi.com/1907

密码加密: bcrypt

	加密： var hash = bcrypt.hashSync(用户传过来的明文密码, 加盐数); 
	校验:  bcrypt.compareSync(用户传过来的明文密码, hash); // true|false
	
数据代理
	
	代理: 
		接口文档： https://www.cnblogs.com/e-cat/p/8656040.html
		豆瓣:
			hostname:'douban.uieee.com',//主机名
		    port: 443,//端口
		    path:'/v2/movie/top250?start=3&count=1',
		    method:'get'


		数据代理proxy:		request请求 抓取异步数据

		  options={
		    hostname:'douban.uieee.com',//主机名
		    port: 443,//端口
		    path:'/v2/movie/top250?start=3&count=1',
		    method:'get'
		  };

		  发送http[s]请求
		  
		  http[s].request(配置项,回调(响应对象resHttp))	返回请求对象reqHttp
		  	resHttp 响应对象
		    resHttp.statusCode 状态码  200 OK
		    resHttp.headers 获取响应头信息
		    resHttp.setEncoding('utf-8') 设置编码方式
		    resHttp.on('data/end',fn)  ->send给前端
		  });

		  reqHttp 请求对象
		  reqHttp.on('error',(err)=>{console.log(err)});	监听请求失败信息
		  reqHttp.end();请求结束
